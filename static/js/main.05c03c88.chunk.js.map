{"version":3,"sources":["constants/keys.js","constants/drums.js","components/DrumMachine/DrumPad.js","components/DrumMachine/index.js","components/ThemeProvider.js","App.js","serviceWorker.js","index.js"],"names":["Keys","split","Drums","q","url","description","id","w","e","a","s","d","z","x","c","DrumPad","drumKey","updateDescription","lowerKey","toLowerCase","upperKey","toUpperCase","audio","React","useRef","hit","current","play","useKey","detectKeys","variant","className","width","height","maxWidth","maxHeight","onClick","src","ref","DrumMachine","useState","status","setStatus","alignItems","justifyContent","bg","fontSize","marginBottom","color","textAlign","columns","map","key","paddingTop","p","length","count","ThemeProvider","children","theme","preset","App","useFccTest","fccTest","FccTests","drum_machine","queryParam","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAEeA,EAFF,YAAYC,MAAM,ICgDhBC,EAhDD,CACVC,EAAG,CACCC,IAAK,2DACLC,YAAa,WACbC,GAAI,YAERC,EAAG,CACCH,IAAK,2DACLC,YAAa,WACbC,GAAI,YAERE,EAAG,CACCJ,IAAK,2DACLC,YAAa,WACbC,GAAI,YAERG,EAAG,CACCL,IAAK,6DACLC,YAAa,WACbC,GAAI,YAERI,EAAG,CACCN,IAAK,2DACLC,YAAa,OACbC,GAAI,QAERK,EAAG,CACCP,IAAK,yDACLC,YAAa,cACbC,GAAI,eAERM,EAAG,CACCR,IAAK,6DACLC,YAAa,cACbC,GAAI,YAERO,EAAG,CACCT,IAAK,6DACLC,YAAa,OACbC,GAAI,QAERQ,EAAG,CACCV,IAAK,yDACLC,YAAa,gBACbC,GAAI,kB,wBCRGS,EA7BC,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,kBAClBC,EAAWF,EAAQG,cACnBC,EAAWJ,EAAQK,cAFuB,EAGfnB,EAAMgB,GAA/BZ,EAHwC,EAGxCA,GAAIF,EAHoC,EAGpCA,IAAKC,EAH+B,EAG/BA,YACXiB,EAAQC,IAAMC,SAEdC,EAAM,WACRH,EAAMI,QAAQC,OACdV,EAAkBZ,IAGtBuB,IAAOH,EAAK,CAAEI,WAAY,CAACX,EAAUE,KAKrC,OACI,kBAAC,IAAD,CAAQU,QAAQ,YAAYxB,GAAIA,EAAIyB,UAAU,WAAWC,MAHhD,SAG6DC,OAH7D,SAG2EC,SAJxE,QAI2FC,UAJ3F,QAI+GC,QAASX,GAChI,2BAAOnB,GAAIc,EAAUiB,IAAKjC,EAAK2B,UAAU,OAAOO,IAAKhB,IACpDF,I,yBCOEmB,EAxBK,WAAO,IAAD,EACMhB,IAAMiB,SAAS,IADrB,mBACfC,EADe,KACPC,EADO,KAGtB,OACI,kBAAC,IAAD,CAAMC,WAAW,SAASC,eAAe,SAASX,OAAO,SACrD,kBAAC,IAAD,CAAM3B,GAAG,eAAe4B,SAAS,QAAQW,GAAG,OAAOC,SAAU,GACzD,kBAAC,IAAD,CAASC,aAAc,EAAGC,MAAM,UAAUF,SAAU,EAAGG,UAAU,UAAjE,gBAGA,kBAAC,IAAD,CAAOC,QAAS,GACXlD,EAAKmD,KAAI,SAAAnC,GAAO,OACb,kBAAC,EAAD,CAASoC,IAAKpC,EAASA,QAASA,EAASC,kBAAmByB,QAGpE,kBAAC,IAAD,CAAMpC,GAAG,UAAUqC,WAAW,SAASC,eAAe,SAASX,OAAO,OAAOoB,WAAY,GACrF,kBAAC,IAAD,CAAML,MAAM,UAAUH,GAAG,YAAYS,EAAG,GACnCb,EAAOc,OAASd,EAAS,kBAAC,IAAD,CAAMe,MAAO,U,iCCPhDC,EAbO,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAClB,kBAAC,IAAD,CAAsBC,MAAOC,KACxBF,ICWMG,MAbf,WAMI,OALAC,qBAAW,CACPC,QAASC,WAASC,aAClBC,WAAY,aAIZ,kBAAC,EAAD,KACI,kBAAC,EAAD,QCDQC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GAC/BA,EAAaC,kB","file":"static/js/main.05c03c88.chunk.js","sourcesContent":["const Keys = 'qweasdzxc'.split('');\n\nexport default Keys;","const Drums = {\n    q: {\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3',\n        description: 'Heater 1',\n        id: 'heater-1'\n    },\n    w: {\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3',\n        description: 'Heater 2',\n        id: 'heater-2'\n    },\n    e: {\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3',\n        description: 'Heater 3',\n        id: 'heater-3'\n    },\n    a: {\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3',\n        description: 'Heater 4',\n        id: 'heater-4'\n    },\n    s: {\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3',\n        description: 'Clap',\n        id: 'clap'\n    },\n    d: {\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3',\n        description: 'Open Hi-hat',\n        id: 'open-hi-hat'\n    },\n    z: {\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3',\n        description: 'Kick-n\\'-Hat',\n        id: 'kick-hat'\n    },\n    x: {\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3',\n        description: 'Kick',\n        id: 'kick'\n    },\n    c: {\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3',\n        description: 'Closed Hi-hat',\n        id: 'closed-hi-hat'\n    }\n};\n\nexport default Drums;","import React from 'react';\nimport useKey from 'use-key-hook';\nimport { Button } from 'rebass';\nimport { Drums } from '../../constants';\nimport PropTypes from 'prop-types';\n\n\nconst DrumPad = ({ drumKey, updateDescription }) => {\n    const lowerKey = drumKey.toLowerCase();\n    const upperKey = drumKey.toUpperCase();\n    const { id, url, description } = Drums[lowerKey];\n    const audio = React.useRef();\n\n    const hit = () => {\n        audio.current.play();\n        updateDescription(description);\n    };\n\n    useKey(hit, { detectKeys: [lowerKey, upperKey] });\n\n    const maxSize = '100px';\n    const size = '25vmin';\n    \n    return (\n        <Button variant=\"contained\" id={id} className='drum-pad' width={size} height={size} maxWidth={maxSize} maxHeight={maxSize} onClick={hit}>\n            <audio id={upperKey} src={url} className='clip' ref={audio}/>\n            {upperKey}\n        </Button>\n    );\n};\n\nDrumPad.propTypes = {\n    drumKey: PropTypes.string.isRequired,\n    updateDescription: PropTypes.func.isRequired\n};\n\nexport default DrumPad;","import React from 'react';\nimport { Keys } from '../../constants';\nimport DrumPad from './DrumPad';\nimport { Card, Heading, Text, Flex } from 'rebass';\nimport { Tiles } from '@rebass/layout';\nimport Nbsp from 'react-nbsp';\n\n// import styled from 'styled-components';\n\nconst DrumMachine = () => {\n    const [status, setStatus] = React.useState('');\n\n    return (\n        <Flex alignItems='center' justifyContent='center' height='100vh'>\n            <Card id='drum-machine' maxWidth='500px' bg='gray' fontSize={4}>\n                <Heading marginBottom={3} color='primary' fontSize={5} textAlign='center'>\n                    Drum Machine\n                </Heading>\n                <Tiles columns={3}>\n                    {Keys.map(drumKey =>\n                        <DrumPad key={drumKey} drumKey={drumKey} updateDescription={setStatus} />\n                    )}\n                </Tiles>\n                <Flex id='display' alignItems='center' justifyContent='center' height='60px' paddingTop={2}>\n                    <Text color='primary' bg='highlight' p={2}>\n                        {status.length ? status : <Nbsp count={20} />}\n                    </Text>\n                </Flex>\n            </Card>\n        </Flex>\n    );\n};\n\nexport default DrumMachine;","import React from 'react';\nimport { ThemeProvider as EmotionThemeProvider } from 'emotion-theming';\nimport preset from '@rebass/preset';\nimport PropTypes from 'prop-types';\n\nconst ThemeProvider = ({ children }) => (\n    <EmotionThemeProvider theme={preset}>\n        {children}\n    </EmotionThemeProvider>\n);\n\nThemeProvider.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ]).isRequired\n};\n\nexport default ThemeProvider;","import React from 'react';\nimport DrumMachine from './components/DrumMachine';\nimport { useFccTest, FccTests } from '@asteffey/react-fcc-test';\nimport ThemeProvider from './components/ThemeProvider';\n\nfunction App() {\n    useFccTest({ \n        fccTest: FccTests.drum_machine,\n        queryParam: 'fcc-test'\n    });\n\n    return (\n        <ThemeProvider>\n            <DrumMachine/>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}